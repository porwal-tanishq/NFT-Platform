{"ast":null,"code":"import _asyncToGenerator from \"E:/College/Eight Sem/GitHub/NFT-Platform/Project/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"E:/College/Eight Sem/GitHub/NFT-Platform/Project/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"E:\\\\College\\\\Eight Sem\\\\GitHub\\\\NFT-Platform\\\\Project\\\\src\\\\contexts_and_providers\\\\web3Provider.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"E:\\\\College\\\\Eight Sem\\\\GitHub\\\\NFT-Platform\\\\Project\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { useReducer } from 'react';\nimport Web3Context from './web3Context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar defaultWeb3State = {\n  account: null,\n  networkId: null\n};\n\nvar web3Reducer = function web3Reducer(state, action) {\n  if (action.type === 'ACCOUNT') {\n    return {\n      account: action.account,\n      networkId: state.networkId\n    };\n  }\n\n  if (action.type === 'NETWORKID') {\n    return {\n      account: state.account,\n      networkId: action.networkId\n    };\n  }\n\n  return defaultWeb3State;\n};\n\nvar Web3Provider = function Web3Provider(props) {\n  _s();\n\n  var _useReducer = useReducer(web3Reducer, defaultWeb3State),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      web3State = _useReducer2[0],\n      dispatchWeb3Action = _useReducer2[1];\n\n  var loadAccountHandler = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(web3) {\n      var accounts, account;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return web3.eth.getAccounts();\n\n            case 2:\n              accounts = _context.sent;\n              console.log(accounts);\n              account = accounts[0];\n              console.log(account);\n              dispatchWeb3Action({\n                type: 'ACCOUNT',\n                account: account\n              });\n              return _context.abrupt(\"return\", account);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function loadAccountHandler(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var loadNetworkIdHandler = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(web3) {\n      var networkId;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return web3.eth.net.getId();\n\n            case 2:\n              networkId = _context2.sent;\n              console.log(networkId);\n              dispatchWeb3Action({\n                type: 'NETWORKID',\n                networkId: networkId\n              });\n              return _context2.abrupt(\"return\", networkId);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function loadNetworkIdHandler(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var web3Context = {\n    account: web3State.account,\n    networkId: web3State.networkId,\n    loadAccount: loadAccountHandler,\n    loadNetworkId: loadNetworkIdHandler\n  };\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: web3Context,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Web3Provider, \"C3AzG0u+y2G3aAnVzYqJS6tWeFM=\");\n\n_c = Web3Provider;\nexport default Web3Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"names":["useReducer","Web3Context","defaultWeb3State","account","networkId","web3Reducer","state","action","type","Web3Provider","props","web3State","dispatchWeb3Action","loadAccountHandler","web3","eth","getAccounts","accounts","console","log","loadNetworkIdHandler","net","getId","web3Context","loadAccount","loadNetworkId","children"],"sources":["E:/College/Eight Sem/GitHub/NFT-Platform/Project/src/contexts_and_providers/web3Provider.js"],"sourcesContent":["import { useReducer } from 'react';\r\n\r\nimport Web3Context from './web3Context';\r\n\r\nconst defaultWeb3State = {\r\n  account: null,\r\n  networkId: null\r\n};\r\n\r\nconst web3Reducer = (state, action) => {\r\n  if(action.type === 'ACCOUNT') \r\n  {\r\n    return {\r\n      account: action.account,\r\n      networkId: state.networkId\r\n    };\r\n  } \r\n  \r\n  if(action.type === 'NETWORKID') \r\n  {\r\n    return {\r\n      account: state.account,\r\n      networkId: action.networkId\r\n    };\r\n  }\r\n  \r\n  return defaultWeb3State;\r\n};\r\n\r\nconst Web3Provider = props => {\r\n  const [web3State, dispatchWeb3Action] = useReducer(web3Reducer, defaultWeb3State);\r\n  \r\n  const loadAccountHandler = async(web3) => {\r\n    const accounts = await web3.eth.getAccounts();\r\n    console.log(accounts);\r\n    const account = accounts[0];\r\n    console.log(account)\r\n    dispatchWeb3Action({type: 'ACCOUNT', account: account});\r\n    return account;\r\n  };\r\n\r\n  const loadNetworkIdHandler = async(web3) => {\r\n    const networkId = await web3.eth.net.getId();\r\n    console.log(networkId);\r\n    dispatchWeb3Action({type: 'NETWORKID', networkId: networkId});\r\n    return networkId;   \r\n  };\r\n  \r\n  const web3Context = {\r\n    account:web3State.account,\r\n    networkId: web3State.networkId,\r\n    loadAccount: loadAccountHandler,\r\n    loadNetworkId: loadNetworkIdHandler\r\n  };\r\n  \r\n  return (\r\n    <Web3Context.Provider value={web3Context}>\r\n      {props.children}\r\n    </Web3Context.Provider>\r\n  );\r\n};\r\n\r\nexport default Web3Provider;"],"mappings":";;;;;;;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,IAAMC,gBAAgB,GAAG;EACvBC,OAAO,EAAE,IADc;EAEvBC,SAAS,EAAE;AAFY,CAAzB;;AAKA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,MAAR,EAAmB;EACrC,IAAGA,MAAM,CAACC,IAAP,KAAgB,SAAnB,EACA;IACE,OAAO;MACLL,OAAO,EAAEI,MAAM,CAACJ,OADX;MAELC,SAAS,EAAEE,KAAK,CAACF;IAFZ,CAAP;EAID;;EAED,IAAGG,MAAM,CAACC,IAAP,KAAgB,WAAnB,EACA;IACE,OAAO;MACLL,OAAO,EAAEG,KAAK,CAACH,OADV;MAELC,SAAS,EAAEG,MAAM,CAACH;IAFb,CAAP;EAID;;EAED,OAAOF,gBAAP;AACD,CAlBD;;AAoBA,IAAMO,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;EAAA;;EAC5B,kBAAwCV,UAAU,CAACK,WAAD,EAAcH,gBAAd,CAAlD;EAAA;EAAA,IAAOS,SAAP;EAAA,IAAkBC,kBAAlB;;EAEA,IAAMC,kBAAkB;IAAA,oEAAG,iBAAMC,IAAN;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OACFA,IAAI,CAACC,GAAL,CAASC,WAAT,EADE;;YAAA;cACnBC,QADmB;cAEzBC,OAAO,CAACC,GAAR,CAAYF,QAAZ;cACMd,OAHmB,GAGTc,QAAQ,CAAC,CAAD,CAHC;cAIzBC,OAAO,CAACC,GAAR,CAAYhB,OAAZ;cACAS,kBAAkB,CAAC;gBAACJ,IAAI,EAAE,SAAP;gBAAkBL,OAAO,EAAEA;cAA3B,CAAD,CAAlB;cALyB,iCAMlBA,OANkB;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAH;;IAAA,gBAAlBU,kBAAkB;MAAA;IAAA;EAAA,GAAxB;;EASA,IAAMO,oBAAoB;IAAA,qEAAG,kBAAMN,IAAN;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OACHA,IAAI,CAACC,GAAL,CAASM,GAAT,CAAaC,KAAb,EADG;;YAAA;cACrBlB,SADqB;cAE3Bc,OAAO,CAACC,GAAR,CAAYf,SAAZ;cACAQ,kBAAkB,CAAC;gBAACJ,IAAI,EAAE,WAAP;gBAAoBJ,SAAS,EAAEA;cAA/B,CAAD,CAAlB;cAH2B,kCAIpBA,SAJoB;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAH;;IAAA,gBAApBgB,oBAAoB;MAAA;IAAA;EAAA,GAA1B;;EAOA,IAAMG,WAAW,GAAG;IAClBpB,OAAO,EAACQ,SAAS,CAACR,OADA;IAElBC,SAAS,EAAEO,SAAS,CAACP,SAFH;IAGlBoB,WAAW,EAAEX,kBAHK;IAIlBY,aAAa,EAAEL;EAJG,CAApB;EAOA,oBACE,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAEG,WAA7B;IAAA,UACGb,KAAK,CAACgB;EADT;IAAA;IAAA;IAAA;EAAA,SADF;AAKD,CA/BD;;GAAMjB,Y;;KAAAA,Y;AAiCN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}