{"ast":null,"code":"import _asyncToGenerator from \"E:/College/Eight Sem/GitHub/NFT-Platform/Project/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"E:/College/Eight Sem/GitHub/NFT-Platform/Project/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"E:\\\\College\\\\Eight Sem\\\\GitHub\\\\NFT-Platform\\\\Project\\\\src\\\\MintNFT.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"E:\\\\College\\\\Eight Sem\\\\GitHub\\\\NFT-Platform\\\\Project\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { useState, useContext } from 'react';\nimport Web3Context from './contexts_and_providers/web3Context';\nimport NFTContext from './contexts_and_providers/nftContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient.create({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n});\n\nvar MintNFTForm = function MintNFTForm() {\n  _s();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      NFTName = _useState2[0],\n      setNFTName = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      nameIsValid = _useState4[0],\n      setNameIsValid = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      NFTDescription = _useState6[0],\n      setNFTDescription = _useState6[1];\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      descriptionIsValid = _useState8[0],\n      setDescriptionIsValid = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      NFTImageFileBuffer = _useState10[0],\n      setNFTImageFileBuffer = _useState10[1];\n\n  var _useState11 = useState(true),\n      _useState12 = _slicedToArray(_useState11, 2),\n      fileIsValid = _useState12[0],\n      setFileIsValid = _useState12[1];\n\n  var web3Ctx = useContext(Web3Context);\n  var nftCtx = useContext(NFTContext);\n\n  var enterNFTNameHandler = function enterNFTNameHandler(event) {\n    setNFTName(event.target.value);\n  };\n\n  var enterNFTDescriptionHandler = function enterNFTDescriptionHandler(event) {\n    setNFTDescription(event.target.value);\n  };\n\n  var captureFile = function captureFile(event) {\n    event.preventDefault();\n    var file = event.target.files[0];\n    var reader = new window.FileReader();\n    reader.readAsArrayBuffer(file);\n\n    reader.onloadend = function () {\n      setNFTImageFileBuffer(Buffer(reader.result));\n    };\n  };\n\n  var submissionHandler = function submissionHandler(event) {\n    event.preventDefault();\n    NFTName ? setNameIsValid(true) : setNameIsValid(false);\n    NFTDescription ? setDescriptionIsValid(true) : setDescriptionIsValid(false);\n    NFTImageFileBuffer ? setFileIsValid(true) : setFileIsValid(false);\n    var formIsValid = NFTName && NFTDescription && NFTImageFileBuffer;\n\n    var mintNFT = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var fileAdded, metadata, metadataAdded;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return ipfs.add(NFTImageFileBuffer);\n\n              case 2:\n                fileAdded = _context.sent;\n\n                if (fileAdded) {\n                  _context.next = 8;\n                  break;\n                }\n\n                console.error('Error, while updloading file to IPFS');\n                return _context.abrupt(\"return\");\n\n              case 8:\n                console.log(fileAdded);\n\n              case 9:\n                metadata = {\n                  title: \"NFT Metadata\",\n                  type: \"object\",\n                  properties: {\n                    name: {\n                      type: \"string\",\n                      description: NFTName\n                    },\n                    description: {\n                      type: \"string\",\n                      description: NFTDescription\n                    },\n                    image: {\n                      type: \"string\",\n                      description: fileAdded.path\n                    }\n                  }\n                };\n                _context.next = 12;\n                return ipfs.add(JSON.stringify(metadata));\n\n              case 12:\n                metadataAdded = _context.sent;\n\n                if (metadataAdded) {\n                  _context.next = 18;\n                  break;\n                }\n\n                console.error('Error, while updloading metadata to IPFS');\n                return _context.abrupt(\"return\");\n\n              case 18:\n                console.log(metadataAdded);\n\n              case 19:\n                nftCtx.contract.methods.Mint(metadataAdded.path).send({\n                  from: web3Ctx.account\n                }).on('transactionHash', function (hash) {\n                  nftCtx.setNftIsLoading(true);\n                }).on('error', function (e) {\n                  window.alert('Error, Something went wrong');\n                  nftCtx.setNftIsLoading(false);\n                });\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function mintNFT() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    formIsValid && mintNFT();\n  };\n\n  var nameClass = nameIsValid ? \"form-control\" : \"form-control is-invalid\";\n  var descriptionClass = descriptionIsValid ? \"form-control\" : \"form-control is-invalid\";\n  var fileClass = fileIsValid ? \"form-control\" : \"form-control is-invalid\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row justify-content-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-2\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"\".concat(nameClass, \" mb-1\"),\n          placeholder: \"Name...\",\n          value: NFTName,\n          onChange: enterNFTNameHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-5\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"\".concat(descriptionClass, \" mb-1\"),\n          placeholder: \"Description...\",\n          value: NFTDescription,\n          onChange: enterNFTDescriptionHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-2\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          className: \"\".concat(fileClass, \" mb-1\"),\n          onChange: captureFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-lg btn-success text-black btn-block\",\n      children: \"Mint\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(MintNFTForm, \"yRxRvwJH0ApN9c0sUxN1ezNL2iE=\");\n\n_c = MintNFTForm;\nexport default MintNFTForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"MintNFTForm\");","map":{"version":3,"names":["useState","useContext","Web3Context","NFTContext","ipfsClient","require","ipfs","create","host","port","protocol","MintNFTForm","NFTName","setNFTName","nameIsValid","setNameIsValid","NFTDescription","setNFTDescription","descriptionIsValid","setDescriptionIsValid","NFTImageFileBuffer","setNFTImageFileBuffer","fileIsValid","setFileIsValid","web3Ctx","nftCtx","enterNFTNameHandler","event","target","value","enterNFTDescriptionHandler","captureFile","preventDefault","file","files","reader","window","FileReader","readAsArrayBuffer","onloadend","Buffer","result","submissionHandler","formIsValid","mintNFT","add","fileAdded","console","error","log","metadata","title","type","properties","name","description","image","path","JSON","stringify","metadataAdded","contract","methods","Mint","send","from","account","on","hash","setNftIsLoading","e","alert","nameClass","descriptionClass","fileClass"],"sources":["E:/College/Eight Sem/GitHub/NFT-Platform/Project/src/MintNFT.js"],"sourcesContent":["import { useState, useContext } from 'react';\r\nimport Web3Context from './contexts_and_providers/web3Context';\r\nimport NFTContext from './contexts_and_providers/nftContext';\r\nconst ipfsClient = require('ipfs-http-client');\r\nconst ipfs = ipfsClient.create({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\r\n\r\nconst MintNFTForm = () => {  \r\n  const [NFTName, setNFTName] = useState('');\r\n  const [nameIsValid, setNameIsValid] = useState(true);\r\n  const [NFTDescription, setNFTDescription] = useState('');\r\n  const [descriptionIsValid, setDescriptionIsValid] = useState(true);\r\n  const [NFTImageFileBuffer, setNFTImageFileBuffer] = useState(null);\r\n  const [fileIsValid, setFileIsValid] = useState(true);\r\n  const web3Ctx = useContext(Web3Context);\r\n  const nftCtx = useContext(NFTContext);\r\n  \r\n  const enterNFTNameHandler = (event) => {\r\n    setNFTName(event.target.value);\r\n  };\r\n\r\n  const enterNFTDescriptionHandler = (event) => {\r\n    setNFTDescription(event.target.value);\r\n  };\r\n\r\n  const captureFile = (event) => {\r\n    event.preventDefault();\r\n    const file = event.target.files[0];\r\n    const reader = new window.FileReader();\r\n    reader.readAsArrayBuffer(file);\r\n    reader.onloadend = () => {\r\n      setNFTImageFileBuffer(Buffer(reader.result));     \r\n    }\r\n  };  \r\n\r\n  const submissionHandler = (event) => {\r\n    event.preventDefault();\r\n    NFTName ? setNameIsValid(true) : setNameIsValid(false);\r\n    NFTDescription ? setDescriptionIsValid(true) : setDescriptionIsValid(false);\r\n    NFTImageFileBuffer ? setFileIsValid(true) : setFileIsValid(false);\r\n    const formIsValid = NFTName && NFTDescription && NFTImageFileBuffer;\r\n    \r\n    const mintNFT = async() => {\r\n      const fileAdded = await ipfs.add(NFTImageFileBuffer);\r\n      if(!fileAdded) \r\n      {\r\n        console.error('Error, while updloading file to IPFS');\r\n        return;\r\n      }\r\n      else\r\n      {\r\n        console.log(fileAdded);\r\n      }\r\n\r\n      const metadata = \r\n      {\r\n        title: \"NFT Metadata\",\r\n        type: \"object\",\r\n        properties: {\r\n          name: {\r\n            type: \"string\",\r\n            description: NFTName\r\n          },\r\n          description: {\r\n            type: \"string\",\r\n            description: NFTDescription\r\n          },\r\n          image: {\r\n            type: \"string\",\r\n            description: fileAdded.path\r\n          }\r\n        }\r\n      };\r\n\r\n      const metadataAdded = await ipfs.add(JSON.stringify(metadata));\r\n      if(!metadataAdded) \r\n      {\r\n        console.error('Error, while updloading metadata to IPFS');\r\n        return;\r\n      }\r\n      else\r\n      {\r\n        console.log(metadataAdded);\r\n      }\r\n\r\n      nftCtx.contract.methods.Mint(metadataAdded.path).send({ from: web3Ctx.account }).on('transactionHash', (hash) => {\r\n        nftCtx.setNftIsLoading(true);\r\n      }).on('error', (e) =>{\r\n        window.alert('Error, Something went wrong');\r\n        nftCtx.setNftIsLoading(false);  \r\n      })      \r\n    };\r\n    formIsValid && mintNFT();\r\n  };\r\n\r\n  const nameClass = nameIsValid? \"form-control\" : \"form-control is-invalid\";\r\n  const descriptionClass = descriptionIsValid? \"form-control\" : \"form-control is-invalid\";\r\n  const fileClass = fileIsValid? \"form-control\" : \"form-control is-invalid\";\r\n  \r\n  return(\r\n    <form onSubmit={submissionHandler}>\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-2\">\r\n          <input\r\n            type='text'\r\n            className={`${nameClass} mb-1`}\r\n            placeholder='Name...'\r\n            value={NFTName}\r\n            onChange={enterNFTNameHandler}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-5\">\r\n          <input\r\n            type='text'\r\n            className={`${descriptionClass} mb-1`}\r\n            placeholder='Description...'\r\n            value={NFTDescription}\r\n            onChange={enterNFTDescriptionHandler}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-2\">\r\n          <input\r\n            type='file'\r\n            className={`${fileClass} mb-1`}\r\n            onChange={captureFile}\r\n          />\r\n        </div>\r\n      </div>\r\n      <br></br>\r\n      <button type='submit' className='btn btn-lg btn-success text-black btn-block'>Mint</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MintNFTForm;"],"mappings":"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"},"metadata":{},"sourceType":"module"}